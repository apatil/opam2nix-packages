#!/bin/bash -eu
function gupcat {
	gup -u "$@"
	cat "$@"
}

function fetchgitargs {
	repo="$1"
	workdir="$2"
	rev="$3"
	digest="$(nix-prefetch-git "$(pwd)/$workdir" "$rev" | tail -n 1)"
	[ -n "$digest" ]
	cat <<EOF
		url = "$repo";
		rev = "$rev";
		sha256 = "$digest";
EOF
}

# gup -u release.{opam2nix,repo}.commit
cat > "$1" <<EOF
{ pkgs ? import <nixpkgs> {}}:
with pkgs;
let
	# For development, set OPAM2NIX_DEVEL to your local
	# opam2nix repo path
	devRepo = builtins.getEnv "OPAM2NIX_DEVEL";

	src = fetchgit {
		fetchSubmodules = false;
$(fetchgitargs \
			"https://github.com/timbertson/opam2nix-packages.git" \
			".." \
			"$(gupcat release.packages.commit)")
	};

	# We could leave this out and just use \`fetchSubmodules\` above,
	# but that leads to mass-rebuilds every time the repo changes
	# (rather than only when opam2nix is updated)
	opam2nix = fetchgit {
$(fetchgitargs \
			"https://github.com/timbertson/opam2nix.git" \
			"../opam2nix" \
			"$(gupcat release.opam2nix.commit)")
	};
in
if devRepo != "" then
	let toPath = s: /. + s; in
	callPackage "\${devRepo}/nix" {} {
			src = toPath "\${devRepo}/nix/local.tgz";
			opam2nix = toPath "\${devRepo}/opam2nix/nix/local.tgz";
		}
else callPackage "\${src}/nix" {} { inherit src opam2nix; }
EOF
